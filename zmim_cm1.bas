' Autogenerated on 27-06-2020 23:05:52

Mode 1
PAGE_SIZE=512
NUM_PHYSICAL_PAGES=60
NUM_VIRTUAL_PAGES=128*1024\PAGE_SIZE
Dim FILE_LEN
Dim BASE_STATIC
Dim FIRST_SWAP_PAGE
Dim m(NUM_PHYSICAL_PAGES*PAGE_SIZE\4)
Dim pf
Dim MEM_FILE$
Dim pp_to_vp(NUM_PHYSICAL_PAGES-1)
Dim vp_to_pp(NUM_VIRTUAL_PAGES-1)
Dim next_page

Function rp()
 Local pp,vp
 vp=pc\PAGE_SIZE
 pp=vp_to_pp(vp)
 If pp=0 Then pp=mem_load(vp):pf=pf+1
 rp=Peek(Var m(0),pp*PAGE_SIZE+(pc Mod PAGE_SIZE))
 pc=pc+1
End Function

Function rb(a)
 Local pp,vp
 If a<BASE_STATIC Then rb=Peek(Var m(0),a):Exit Function
 vp=a\PAGE_SIZE
 pp=vp_to_pp(vp)
 If pp=0 Then pp=mem_load(vp):pf=pf+1
 rb=Peek(Var m(0),pp*PAGE_SIZE+(a Mod Page_SIZE))
End Function

Function rw(a)
 rw=rb(a)*256+rb(a+1)
End Function

Sub wb(a,x)
 Poke Var m(0),a,x
End Sub

Sub ww(a,x)
 Poke Var m(0),a,x\256
 Poke Var m(0),a+1,x Mod 256
End Sub

Function mem_load(vp)
 Local ad,buf$,buf_sz,i,pp,to_read
 pp=next_page
 next_page=next_page+1
 If next_page=NUM_PHYSICAL_PAGES Then next_page=FIRST_SWAP_PAGE
 Open MEM_FILE$ For random As #1
 Seek #1,vp*PAGE_SIZE+1
 ad=pp*PAGE_SIZE
 to_read=PAGE_SIZE
 buf_sz=255
 Do While to_read>0
  If to_read<255 Then buf_sz=to_read
  buf$=Input$(buf_sz,1)
  For i=1 To buf_sz
   Poke Var m(0),ad,Peek(Var buf$,i)
   ad=ad+1
  Next i
  to_read=to_read-buf_sz
 Loop
 Close #1
 vp_to_pp(pp_to_vp(pp))=0
 vp_to_pp(vp)=pp
 pp_to_vp(pp)=vp
 mem_load=pp
End Function

Sub mem_init(f$)
 Local i
 MEM_FILE$=f$
 cout("Loading '"+MEM_FILE$+"'"):endl()
 cout("  Header page: 0"):endl()
 If mem_load(0)<>0 Then Error
 BASE_STATIC=Peek(Var m(0),&h0E)*256+Peek(Var m(0),&h0F)
 FILE_LEN=(Peek(Var m(0),&h1A)*256+Peek(Var m(0),&h1B))*2
 FIRST_SWAP_PAGE=BASE_STATIC\PAGE_SIZE
 If BASE_STATIC Mod PAGE_SIZE>0 Then FIRST_SWAP_PAGE=FIRST_SWAP_PAGE+1
 cout("  Dynamic pages: ")
 For i=1 To FIRST_SWAP_PAGE-1
  If i>1 Then cout(", ")
  cout(Str$(i))
  If mem_load(i)<>i Then Error
 Next i
 endl()
 cout("  Paged memory starts at page "+Str$(FIRST_SWAP_PAGE)):endl()
End Sub

Dim stack(511)
Dim sp

Function st_pop()
 sp=sp-1
 st_pop=stack(sp)
End Function

Sub st_push(x)
 stack(sp)=x
 sp=sp+1
End Sub

Function st_peek(i)
 If i>=sp Then Error"Attempt to peek beyond stack pointer"
 st_peek=stack(i)
End Function

Sub st_poke(i,x)
 If i>=sp Then Error"Attempt to poke beyond stack pointer"
 If x<0 Or x>&hFFFF Then Error"Invalid unsigned 16-bit value"
 stack(i)=x
End Sub

Dim GLOBAL_VAR

Function vget(i)
 If i=0 Then
  vget=st_pop()
 ElseIf i<&h10 Then
  vget=stack(fp+i+4)
 ElseIf i<=&hFF Then
  vget=rw(GLOBAL_VAR+2*(i-&h10))
 Else
  Error"Unknown variable "+Str$(i)
 EndIf
End Function

Sub vset(i,x)
 If i=0 Then
  st_push(x)
 ElseIf i<&h10 Then
  stack(fp+i+4)=x
 ElseIf i<=&hFF Then
  ww(GLOBAL_VAR+2*(i-&h10),x)
 Else
  Error"Unknown variable "+Str$(i)
 EndIf
End Sub

Dim pc
Dim oc=0
Dim onum=0
Dim oa(4)
Dim ot(4)
Dim ov(4)
Dim st=0
Dim br=0

Sub de_init()
 Local i,s$,x
 Read x
 Dim OP0$(x-1)LENGTH 12
 For i=0 To x-1:Read s$:OP0$(i)=de_format$(s$):Next i
 Read x
 Dim OP1$(x-1)LENGTH 14
 For i=0 To x-1:Read s$:OP1$(i)=de_format$(s$):Next i
 Read x
 Dim OP2$(x-1)LENGTH 15
 For i=0 To x-1:Read s$:OP2$(i)=de_format$(s$):Next i
 Read x
 Dim OPV$(x-1)LENGTH 14
 For i=0 To x-1:Read s$:OPV$(i)=de_format$(s$):Next i
End Sub

Function decode(tr)
 Local op,s$
 If tr Then cout(Hex$(pc)+": ")
 op=rp()
 If op<&h80 Then
  de_long(op)
  s$=OP2$(oc)
 ElseIf op<&hC0 Then
  de_short(op)
  If op<&hB0 Then s$=OP1$(oc)Else s$=OP0$(oc)
 Else
  de_var(op)
  If op<&hE0 Then s$=OP2$(oc)Else s$=OPV$(oc)
 EndIf
 If Left$(s$,1)="B"Then
  st=-1
  br=de_branch()
 ElseIf Left$(s$,1)="S"Then
  st=rp()
  br=0
 ElseIf Left$(s$,1)="X"Then
  st=rp()
  br=de_branch()
 Else
  st=-1
  br=0
 EndIf
 If tr Then dmp_op(Mid$(s$,2))
 decode=op
End Function

Sub de_long(op)
 oc=op And &b11111
 onum=2
 ov(0)=rp()
 ov(1)=rp()
 If op<=&h1F Then
  ot(0)=&b01:oa(0)=ov(0)
  ot(1)=&b01:oa(1)=ov(1)
 ElseIf op<=&h3F Then
  ot(0)=&b01:oa(0)=ov(0)
  ot(1)=&b10:oa(1)=vget(ov(1))
 ElseIf op<=&h5F Then
  ot(0)=&b10:oa(0)=vget(ov(0))
  ot(1)=&b01:oa(1)=ov(1)
 Else
  ot(0)=&b10:oa(0)=vget(ov(0))
  ot(1)=&b10:oa(1)=vget(ov(1))
 EndIf
End Sub

Sub de_short(op)
 oc=op And &b1111
 onum=1
 If op<=&h8F Then
  ot(0)=&b00:ov(0)=rp()*256+rp():oa(0)=ov(0)
 ElseIf op<=&h9F Then
  ot(0)=&b01:ov(0)=rp():oa(0)=ov(0)
 ElseIf op<=&hAF Then
  ot(0)=&b10:ov(0)=rp():oa(0)=vget(ov(0))
 Else
  onum=0
 EndIf
End Sub

Sub de_var(op)
 Local i,x
 oc=op And &b11111
 onum=4
 x=rp()
 For i=0 To 3
  ot(i)=(x And &b11000000)\64
  If ot(i)=&b00 Then
   ov(i)=rp()*256+rp():oa(i)=ov(i)
  ElseIf ot(i)=&b01 Then
   ov(i)=rp():oa(i)=ov(i)
  ElseIf ot(i)=&b10 Then
   ov(i)=rp():oa(i)=vget(ov(i))
  Else
   onum=onum-1
  EndIf
  x=x*4
 Next i
End Sub

Function de_branch()
 Local a,of,x
 a=rp()
 of=a And &b111111
 If(a And &b1000000)=0 Then
  of=256*of+rp()
  If a And &b100000 Then of=of-16384
 EndIf
 x=pc+of-2
 If a And &h80 Then x=x Or &h80000
 de_branch=x
End Function

Function de_format$(a$)
 Local p,s$
 If Instr(a$," SB")>0 Then
  s$="X"
 ElseIf Instr(a$," B")>0 Then
  s$="B"
 ElseIf Instr(a$," S")>0 Then
  s$="S"
 Else
  s$=" "
 EndIf
 p=Instr(a$," ")
 If p=0 Then p=Len(a$)+1
 s$=s$+Left$(a$,p-1)
 de_format$=s$
End Function

Data 14
Data"RTRUE","RFALSE","PRINT","PRINT_RET","NOP"
Data"SAVE B","RESTORE B","RESTART","RET_POPPED","POP"
Data"QUIT","NEW_LINE","SHOW_STATUS","VERIFY B"
Data 16
Data"JZ B","GET_SIBLING SB","GET_CHILD SB","GET_PARENT S","GET_PROP_LEN S"
Data"INC","DEC","PRINT_ADDR","Unknown&h8","REMOVE_OBJ"
Data"PRINT_OBJECT","RET","JUMP","PRINT_PADDR","LOAD S"
Data"NOT S"
Data 25
Data"Unknown&h0","JE B","JL B","JG B","DEC_CHK B"
Data"INC_CHK B","JIN B","TEST B","OR S","AND S"
Data"TEST_ATTR B","SET_ATTR","CLEAR_ATTR","STORE","INSERT_OBJ"
Data"LOADW S","LOADB S","GET_PROP S","GET_PROP_ADDR S","GEN_NEXT_PROP S"
Data"ADD S","SUB S","MUL S","DIV S","MOD S"
Data 22
Data"CALL S","STOREW","STOREB","PUT_PROP","READ"
Data"PRINT_CHAR","PRINT_NUM","RANDOM S","PUSH","PULL"
Data"SPLIT_WINDOW","SET_WINDOW","Unknown&hC","Unknown&hD","Unknown&hE"
Data"Unknown&hF","Unknown&h10","Unknown&h11","Unknown&h12","OUTPUT_STREAM"
Data"INPUT_STREAM","SOUND_EFFECT"
E_OK=0
E_UNKNOWN=1
E_UNIMPLEMENTED=2
E_BREAK=3
E_QUIT=4
E_DEBUG=5
E_REPEAT=6
Dim fp
Dim num_bp
Dim num_ops
Dim ztrace

Function exec(tr)
 Local op,pc_old,sp_old
 pc_old=pc:sp_old=sp
 op=decode(tr)
 num_ops=num_ops+1
 If op<&h80 Then
  exec=ex_2op()
 ElseIf op<&hB0 Then
  exec=ex_1op()
 ElseIf op<&hC0 Then
  exec=ex_0op()
 ElseIf op<&hE0 Then
  exec=ex_2op()
 Else
  exec=ex_varop()
 EndIf
 If exec=E_UNKNOWN Then
  cout("Unsupported instruction "+fmt_hex$(op,2)):endl()
 ElseIf exec=E_UNIMPLEMENTED Then
  cout("Unimplemented instruction "+fmt_hex$(op,2)):endl()
 EndIf
 If exec<>E_OK Then pc=pc_old:sp=sp_old
End Function

Function ex_2op()
 Local a,b,x,y,_
 a=oa(0)
 b=oa(1)
 If oc=&h1 Then
  x=(a=b)
  If(Not x)And(onum>2)Then x=(a=oa(2))
  If(Not x)And(onum>3)Then x=(a=oa(3))
  ex_branch(x,br)
 ElseIf oc=&h2 Then
  If a>32767 Then a=a-65536
  If b>32767 Then b=b-65536
  ex_branch(a<b,br)
 ElseIf oc=&h3 Then
  If a>32767 Then a=a-65536
  If b>32767 Then b=b-65536
  ex_branch(a>b,br)
 ElseIf oc=&h4 Then
  x=vget(a)
  If x>32767 Then x=x-65536
  If b>32767 Then b=b-65536
  x=x-1
  y=x<b
  If x<0 Then x=65536+x
  vset(a,x)
  ex_branch(y,br)
 ElseIf oc=&h5 Then
  x=vget(a)
  If x>32767 Then x=x-65536
  If b>32767 Then b=b-65536
  x=x+1
  y=x>b
  If x<0 Then x=65536+x
  vset(a,x)
  ex_branch(y,br)
 ElseIf oc=&h6 Then
  x=ob_rel(a,PARENT)
  ex_branch(x=b,br)
 ElseIf oc=&h7 Then
  ex_branch((a And b)=b,br)
 ElseIf oc=&h8 Then
  vset(st,a Or b)
 ElseIf oc=&h9 Then
  vset(st,a And b)
 ElseIf oc=&hA Then
  x=ob_attr(a,b)
  ex_branch(x=1,br)
 ElseIf oc=&hB Then
  _=ob_attr(a,b,1,1)
 ElseIf oc=&hC Then
  _=ob_attr(a,b,1,0)
 ElseIf oc=&hD Then
  If a=0 Then st_poke(sp-1,b)Else vset(a,b)
 ElseIf oc=&hE Then
  ob_insert(a,b)
 ElseIf oc=&hF Then
  x=rw(a+2*b)
  vset(st,x)
 ElseIf oc=&h10 Then
  x=rb(a+b)
  vset(st,x)
 ElseIf oc=&h11 Then
  x=ob_prop_get(a,b)
  vset(st,x)
 ElseIf oc=&h12 Then
  x=ob_prop_addr(a,b)
  vset(st,x)
 ElseIf oc=&h13 Then
  x=ob_next_prop(a,b)
  vset(st,x)
 ElseIf oc<&h19 Then
  If a>32767 Then a=a-65536
  If b>32767 Then b=b-65536
  If oc=&h14 Then
   x=a+b
  ElseIf oc=&h15 Then
   x=a-b
  ElseIf oc=&h16 Then
   x=a*b
  ElseIf oc=&h17 Then
   x=a\b
  Else
   x=a Mod b
  EndIf
  If x<0 Then x=65536+x
  vset(st,x)
 Else
  ex_2op=E_UNKNOWN
 EndIf
End Function

Function ex_1op()
 Local a,x
 a=oa(0)
 If oc=&h0 Then
  ex_branch(a=0,br)
 ElseIf oc=&h1 Then
  x=ob_rel(a,SIBLING)
  vset(st,x)
  ex_branch(x<>0,br)
 ElseIf oc=&h2 Then
  x=ob_rel(a,CHILD)
  vset(st,x)
  ex_branch(x<>0,br)
 ElseIf oc=&h3 Then
  x=ob_rel(a,PARENT)
  vset(st,x)
 ElseIf oc=&h4 Then
  x=ob_prop_len(a)
  vset(st,x)
 ElseIf oc=&h5 Then
  x=vget(a)
  If x>32767 Then x=x-65536
  x=x+1
  If x<0 Then x=65536+x
  vset(a,x)
 ElseIf oc=&h6 Then
  x=vget(a)
  If x>32767 Then x=x-65536
  x=x-1
  If x<0 Then x=65536+x
  vset(a,x)
 ElseIf oc=&h7 Then
  print_zstring(a)
 ElseIf oc=&h9 Then
  ob_remove(a)
 ElseIf oc=&hA Then
  ob_print(a)
 ElseIf oc=&hB Then
  ex_return(a)
 ElseIf oc=&hC Then
  If a And &h8000 Then a=a-65536
  pc=pc+a-2
 ElseIf oc=&hD Then
  print_zstring(a*2)
 ElseIf oc=&hE Then
  If a=0 Then x=st_peek(sp-1)Else x=vget(a)
  vset(st,x)
 ElseIf oc=&hF Then
  x=a Xor &b1111111111111111
  vset(st,x)
 Else
  ex_1op=E_UNKNOWN
 EndIf
End Function

Function ex_0op()
 Local x
 If oc=&h0 Then
  ex_return(1)
 ElseIf oc=&h1 Then
  ex_return(0)
 ElseIf oc=&h2 Then
  print_zstring(pc)
 ElseIf oc=&h3 Then
  print_zstring(pc)
  endl()
  ex_return(1)
 ElseIf oc=&h4 Then
 ElseIf oc=&h5 Then
  If script AND S_READ Then
   cout("IGNORED 'save' command read from script"):endl()
  Else
   x=zsave()
   ex_branch(x,br)
  EndIf
 ElseIf oc=&h6 Then
  If script AND S_READ Then
   cout("IGNORED 'restore' command read from script"):endl()
  Else
   x=zsave(1)
  EndIf
 ElseIf oc=&h7 Then
  If script AND S_READ Then
   cout("IGNORED 'restart' command read from script"):endl()
  Else
   main_init()
   For x=0 To 10:endl():Next x
  EndIf
 ElseIf oc=&h8 Then
  x=st_pop()
  ex_return(x)
 ElseIf oc=&h9 Then
  sp=sp-1
 ElseIf oc=&hA Then
  ex_0op=E_QUIT
 ElseIf oc=&hB Then
  endl()
 ElseIf oc=&hC Then
  ex_show_status()
 ElseIf oc=&hD Then
  ex_branch(1,br)
 Else
  ex_0op=E_UNKNOWN
 EndIf
End Function

Function ex_varop()
 Local x,_
 If oc=&h0 Then
  ex_call(st)
 ElseIf oc=&h1 Then
  ww(oa(0)+2*oa(1),oa(2))
 ElseIf oc=&h2 Then
  wb(oa(0)+oa(1),oa(2))
 ElseIf oc=&h3 Then
  ob_prop_set(oa(0),oa(1),oa(2))
 ElseIf oc=&h4 Then
  ex_varop=ex_read(oa(0),oa(1))
 ElseIf oc=&h5 Then
  cout(Chr$(oa(0)))
 ElseIf oc=&h6 Then
  x=oa(0)
  If x>32767 Then x=x-65536
  cout(Str$(x))
 ElseIf oc=&h7 Then
  x=oa(0)
  If x>32767 Then x=x-65536
  x=ex_random(x)
  vset(st,x)
 ElseIf oc=&h8 Then
  st_push(oa(0))
 ElseIf oc=&h9 Then
  x=st_pop()
  If oa(0)=0 Then st_poke(sp-1,x)Else vset(oa(0),x)
 ElseIf oc=&h13 Then
  ex_varop=E_UNIMPLEMENTED
 ElseIf oc=&h14 Then
  ex_varop=E_UNIMPLEMENTED
 ElseIf oc=&h15 Then
 Else
  ex_varop=E_UNKNOWN
 EndIf
End Function

Sub ex_branch(z,br)
 Local x
 If Not(z=(br And &h80000)>0)Then Exit Sub
 x=br And &h7FFFF
 If x=pc-1 Then ex_return(1):Exit Sub
 If x=pc-2 Then ex_return(0):Exit Sub
 pc=x
End Sub

Sub ex_return(x)
 Local st,_
 sp=fp+4
 pc=st_pop()*&h10000+st_pop()
 st=st_pop()
 fp=st_pop()
 vset(st,x)
 If ztrace Then dmp_stack()
End Sub

Sub ex_call(st)
 Local i,nl,x
 If oa(0)=0 Then vset(st,0):Exit Sub
 st_push(fp)
 fp=sp-1
 st_push(st)
 st_push(pc Mod &h10000)
 st_push(pc\&h10000)
 pc=2*oa(0)
 nl=rp()
 st_push(nl)
 For i=1 To nl
  x=rp()*256+rp()
  If i<onum Then st_push(oa(i))Else st_push(x)
 Next i
 If ztrace Then dmp_routine(2*oa(0)):dmp_stack()
End Sub

Function ex_read(text_buf,parse_buf)
 Local ad,c,i,n,word$,s$,t,wc
 t=Timer
 s$=LCase$(cin$("> ",1))
 If Left$(s$,1)="*"Then ex_read=ex_special(s$)
 Timer=t
 If ex_read<>E_OK Then Exit Function
 n=Len(s$)
 For i=1 To n:wb(text_buf+i,Peek(Var s$,i)):Next i
 wb(text_buf+n+1,0)
 s$=s$+" "
 For i=1 To n+1
  c=Peek(Var s$,i)
  If c=&h20 Or Instr(DICT_SEP$(0),Chr$(c))>0 Then
   If Len(word$)>0 Then
    ad=di_lookup(word$)
    ww(parse_buf+2+wc*4,ad)
    wb(parse_buf+4+wc*4,Len(word$))
    wb(parse_buf+5+wc*4,i-Len(word$))
    wc=wc+1
    word$=""
   EndIf
   If c<>&h20 Then
    ad=di_lookup(Chr$(c))
    ww(parse_buf+2+wc*4,ad)
    wb(parse_buf+4+wc*4,1)
    wb(parse_buf+5+wc*4,i-1)
    wc=wc+1
   EndIf
  Else
   word$=word$+Chr$(c)
  EndIf
 Next i
 wb(parse_buf+1,wc)
End Function

Function ex_special(cmd$)
 Local f$,_
 ex_special=E_REPEAT
 If cmd$="*break"Then
  ex_special=E_OK
 ElseIf cmd$="*credits"Then
  endl()
  cout(DESCRIPTION$):endl()
  cout("A Toy Plastic Trumpet Production for Sockpuppet Studios"):endl()
  cout(COPYRIGHT_$):endl()
  cout(VERSION$):endl()
  endl()
  cout("Programmer:           Thomas Hugo Williams"):endl()
  cout("Z-Machine Technical:  Fredrik Ramsberg"):endl()
  cout("Consultant"):endl()
  endl()
 ElseIf cmd$="*replay"Then
  If script AND S_READ Then
   cout("IGNORED '*replay' command read from script")
  Else
   cout("Select a script file from '")
   cout(ss$(SCRIPT_DIR)+"\"+ss$(STORY)+"':")
   endl()
   f$=fi_choose$(ss$(SCRIPT_DIR)+"\"+ss$(STORY),"*.scr")
   If f$<>""Then
    Open f$ For Input As #3
    script=script Or S_READ
   EndIf
  EndIf
  endl()
 ElseIf cmd$="*status"Then
  ex_show_status()
 Else
  ex_special=E_OK
 EndIf
 If ex_special=E_REPEAT Then cout(">")
End Function

Function ex_random(range)
 If range=0 Then
  Randomize Timer
 Exit Function
 ElseIf range<0 Then
  Randomize Abs(range)
 Exit Function
 EndIf
 ex_random=1+CInt((range-1)*Rnd())
End Function

Sub ex_show_status()
 Local x
 x=vget(&h10):ob_print(x):cout(", ")
 x=vget(&h11):cout("Score: "+Str$(x)+", ")
 x=vget(&h12):cout("Moves: "+Str$(x))
 endl()
End Sub

Dim script
Dim cbuf$
Dim cspace
Dim clines
Dim cempty
S_WRITE=&b01
S_READ=&b10
C_HEIGHT=36
C_WIDTH=80

Function cin$(p$,r)
 Local s$
 cout(p$)
 cflush()
 clines=0
 If script And S_READ Then
  Line Input #3,cin$
  If cin$=""Then
   script=script And S_WRITE
   Close #3
  Else
   s$=cin$:cout(s$):endl()
  EndIf
 EndIf
 If Not(script And S_READ)Then Line Input cin$
 If(r=1)And(script AND S_WRITE)And(cin$<>"")Then Print #2,cin$
End Function

Sub cout(s$)
 Local c,i
 For i=1 To Len(s$)
  c=Peek(Var s$,i)
  If(c=&h20)Xor cspace Then cflush():cspace=(c=&h20)
  cbuf$=cbuf$+Chr$(c)
 Next i
End Sub

Sub cflush()
 If Pos=1 And clines>C_HEIGHT-2 Then
  Print"[MORE] ";
  Do While Inkey$<>"":Loop
  Do While Inkey$="":Loop
  Print
  clines=0
 EndIf
 If Pos+Len(cbuf$)>C_WIDTH Then
  Print
  clines=clines+1
  If Not cspace Then cflush()
 Else
  Print cbuf$;
 EndIf
 cbuf$=""
End Sub

Sub endl()
 cflush()
 If Pos=1 Then cempty=cempty+1 Else cempty=0
 If cempty>=0 Then Print:clines=clines+1
 If cempty>10 Then
  Local i
  For i=0 To C_HEIGHT-cempty-1:Print:Next i
  cempty=-999
  clines=0
 EndIf
End Sub

Dim ALPHABET$(2)LENGTH 32
ALPHABET$(0)=" 123[]abcdefghijklmnopqrstuvwxyz"
ALPHABET$(1)=" 123[]ABCDEFGHIJKLMNOPQRSTUVWXYZ"
ALPHABET$(2)=" 123[]@^0123456789.,!?_#'"+Chr$(34)+"/\-:()"

Sub print_zstring(a)
 Local b,c,i,s,x,zc(2)
 For x=0 To 0 Step 0
  x=rw(a)
  zc(0)=(x And &h7C00)\&h400
  zc(1)=(x And &h3E0)\&h20
  zc(2)=(x And &h1F)
  x=x\&h8000
  For i=0 To 2
   c=zc(i)
   If s<3 Then
    If c=0 Then
     cout(" ")
    ElseIf c<4 Then
     s=c+2
    ElseIf c<6 Then
     s=c-3
    Else
     If c=6 And s=2 Then
      s=6
     ElseIf c=7 And s=2 Then
      endl()
      s=0
     Else
      cout(Mid$(ALPHABET$(s),c+1,1))
      s=0
     EndIf
    EndIf
   ElseIf s<6 Then
    b=a
    print_abrv((s-3)*32+c)
    a=b
    s=0
   ElseIf s=6 Then
    s=c+7
   Else
    cout(Chr$((s-7)*32+c))
    s=0
   EndIf
  Next i
  a=a+2
 Next x
End Sub

Sub print_abrv(x)
 Local a,b
 a=rw(&h18)
 b=rw(a+x*2)
 print_zstring(b*2)
End Sub

PARENT=4
SIBLING=5
CHILD=6

Function ob_attr(o,a,s,x)
 Local ad,m,y
 If o=0 Then Exit Function
 ad=rw(&h0A)+62+(o-1)*9+a\8
 y=rb(ad)
 m=2^(7-a Mod 8)
 If s=0 Then ob_attr=(y And m)>0:Exit Function
 If x=0 Then y=(y And(m Xor &hFF))Else y=(y Or m)
 wb(ad,y)
 ob_attr=x
End Function

Function ob_rel(o,r,s,x)
 Local ad
 ad=rw(&h0A)+62+(o-1)*9+r
 If s=0 Then ob_rel=rb(ad):Exit Function
 wb(ad,x)
 ob_rel=x
End Function

Function ob_next_prop(o,p)
 Local ad,x
 If o=0 Then
 Exit Function
 ElseIf p=0 Then
  ad=ob_prop_base(o)
  ad=ad+1+2*rb(ad)
 Else
  ad=ob_prop_addr(o,p)
  If ad=0 Then Error"Property does not exist"
  x=rb(ad-1)
  ad=ad+1+x\32
 EndIf
 x=rb(ad)
 ob_next_prop=x And &b11111
End Function

Function ob_prop_len(ad)
 Local x
 If ad=0 Then Exit Function
 x=rb(ad-1)
 ob_prop_len=x\32+1
End Function

Function ob_prop_base(o)
 Local ad
 ad=rw(&h0A)+62+(o-1)*9+7
 ob_prop_base=rw(ad)
End Function

Function ob_prop_addr(o,p)
 Local ad,x
 ad=ob_prop_base(o)
 ad=ad+1+2*rb(ad)
 Do
  x=rb(ad)
  If(x And &b11111)=p Then ob_prop_addr=ad+1:Exit Function
  If(x And &b11111)<p Then ob_prop_addr=0:Exit Function
  ad=ad+2+x\32
 Loop
End Function

Function ob_prop_get(o,p)
 Local ad,sz,x
 ad=ob_prop_addr(o,p)
 If ad>0 Then
  x=rb(ad-1)
  If(x And &b11111)<>p Then Error
  sz=x\32+1
  If sz=1 Then ob_prop_get=rb(ad):Exit Function
  If sz=2 Then ob_prop_get=rw(ad):Exit Function
  Error"Property length > 2"
 EndIf
 ad=rw(&h0A)+2*(p-1)
 ob_prop_get=rw(ad)
End Function

Sub ob_prop_set(o,p,x)
 Local a,sz
 a=ob_prop_addr(o,p)
 If a=0 Then Error"Object "+Str$(o)+" does not have property "+Str$(p)
 sz=ob_prop_len(a)
 If sz<0 Or sz>2 Then Error"Object "+Str$(o)+" has length "+Str$(sz)
 If sz=1 Then wb(a,x And &hFF)
 If sz=2 Then ww(a,x)
End Sub

Sub ob_print(o)
 Local ad
 ad=ob_prop_base(o)+1
 print_zstring(ad)
End Sub

Sub ob_insert(o,d)
 Local c,_
 ob_remove(o)
 c=ob_rel(d,CHILD)
 _=ob_rel(d,CHILD,1,o)
 _=ob_rel(o,PARENT,1,d)
 _=ob_rel(o,SIBLING,1,c)
End Sub

Sub ob_remove(o)
 Local c,p,s,_
 p=ob_rel(o,PARENT)
 s=ob_rel(o,SIBLING)
 c=ob_rel(p,CHILD)
 _=ob_rel(o,PARENT,1,0)
 _=ob_rel(o,SIBLING,1,0)
 If o=c Then
  _=ob_rel(p,CHILD,1,s)
 Else
  Do
   If ob_rel(c,SIBLING)=o Then _=ob_rel(c,SIBLING,1,s):Exit Do
   c=ob_rel(c,SIBLING)
  Loop Until c=0
 EndIf
End Sub

Function lpad$(s$,i,c$)
 Local a
 a=Len(s$)
 If c$=""Then c$=" "
 If a<i Then lpad$=String$(i-a,c$)+s$ Else lpad$=s$
End Function

Function rpad$(s$,i,c$)
 Local a
 a=Len(s$)
 If c$=""Then c$=" "
 If a<i Then rpad$=s$+String$(i-a,c$)Else rpad$=s$
End Function

Function fmt_hex$(x,i)
 If i<1 Then i=4
 fmt_hex$="&h"+lpad$(Hex$(x),i,"0")
End Function

Dim DICT_AD
Dim DICT_SEP$(1)Length 5
Dim DICT_ENTRY_LEN
Dim DICT_ENTRY_COUNT
Dim DICT_ENTRY_AD

Sub di_init()
 Local i,ns
 DICT_AD=rw(&h08)
 ns=rb(DICT_AD)
 Poke Var DICT_SEP$(0),0,ns
 For i=1 To ns:Poke Var DICT_SEP$(0),i,rb(DICT_AD+i):Next i
 DICT_ENTRY_LEN=rb(DICT_AD+ns+1)
 DICT_ENTRY_COUNT=rw(DICT_AD+ns+2)
 DICT_ENTRY_AD=DICT_AD+ns+4
End Sub

Function di_lookup(w$)
 Local c,i,j,nz,sz,z(9)
 sz=Len(w$):If sz>6 Then sz=6
 i=1
 Do While i<7 And nz<7
  If i>sz Then
   z(nz)=5:nz=nz+1
  Else
   c=Asc(Mid$(w$,i,1))
   j=Instr(ALPHABET$(0),Chr$(c))-1
   If j>-1 Then
    z(nz)=j:nz=nz+1
   Else
    j=Instr(ALPHABET$(2),Chr$(c))-1
    If j>-1 Then
     z(nz)=5:nz=nz+1
     z(nz)=j:nz=nz+1
    Else
     z(nz)=5:nz=nz+1
     z(nz)=6:nz=nz+1
     z(nz)=c\32:nz=nz+1
     z(nz)=c And &b11111:nz=nz+1
    EndIf
   EndIf
  EndIf
  i=i+1
 Loop
 Local x(1)
 x(0)=z(0)*1024+z(1)*32+z(2)
 x(1)=z(3)*1024+z(4)*32+z(5)+32768
 Local a,lb,ub,y(1)
 lb=0
 ub=DICT_ENTRY_COUNT-1
 Do
  i=(lb+ub)\2
  a=DICT_ENTRY_AD+DICT_ENTRY_LEN*i
  y(0)=rw(a)
  y(1)=rw(a+2)
  If x(0)>y(0)Then
   lb=i+1
  ElseIf x(0)<y(0)Then
   ub=i-1
  ElseIf x(1)>y(1)Then
   lb=i+1
  ElseIf x(1)<y(1)Then
   ub=i-1
  Else
   di_lookup=a
   ub=lb-1
  EndIf
 Loop Until ub<lb
End Function

Function zsave(res)
 Local exists(10),i,old_dir$,s$,s2$(2)Length 40
 If res Then
  cout("Select game to restore:"):endl()
 Else
  cout("Select save game slot:"):endl()
 EndIf
 old_dir$=Cwd$
 ChDir ss$(SAVE_DIR)+"\"+ss$(STORY)
 For i=1 To 10
  s$=Dir$("game"+Str$(i)+".sav")
  cout("  ["+Format$(i,"%2g")+"] ")
  If s$=""Then
   cout("Empty"):endl()
  Else
   exists(i)=1
   Open"game"+Str$(i)+".sav"For Input As #1
   Line Input #1,s2$(0)
   Line Input #1,s2$(1)
   Line Input #1,s2$(2)
   Line Input #1,s$
   cout(s2$(2)+" - "+s$):endl()
   Close #1
  EndIf
 Next i
 ChDir old_dir$
 s$=cin$("Game number? ")
 i=Val(s$)
 If i<1 Or i>10 Then i=0
 If i>0 And res And Not exists(i)Then i=0
 If i>0 And Not res And exists(i)Then
  s$=cin$("Overwrite game "+Str$(i)+" [y|N]? ")
  If LCase$(s$)<>"y"Then i=0
 EndIf
 If i>0 And Not res Then
  s$=cin$("Save game name? ")
  If s$=""Then i=0
 EndIf
 If i=0 Then cout("Cancelled"):endl():Exit Function
 s2$(0)=ss$(SAVE_DIR)+"\"+ss$(STORY)+"\game"+Str$(i)+".sav"
 If res Then
  Open s2$(0)For Input As #1
  Line Input #1,s2$(0)
  Line Input #1,s2$(1)
  Line Input #1,s2$(2)
  Line Input #1,s$
  cout("Restoring '"+s$+"' ..."):endl()
  Local ad,err,new_pc,new_fp,stack_sz,mem_sz
  s$=Input$(9,#1)
  new_pc=Peek(Var s$,1)*65536+Peek(Var s$,2)*256+Peek(Var s$,3)
  new_fp=Peek(Var s$,4)*256+Peek(Var s$,5)
  stack_sz=Peek(Var s$,6)*256+Peek(Var s$,7)
  mem_sz=Peek(Var s$,8)*256+Peek(Var s$,9)
  If new_pc<0 Or new_pc>=FILE_LEN Then err=1
  If new_fp<0 Or new_fp>stack_sz Then err=2
  If stack_sz<0 Or stack_sz>511 Then err=3
  If mem_sz<>BASE_STATIC Then err=4
  If err<>0 Then
   cout("Save file is invalid (error "+Str$(err)+")")
   Close #1
  Exit Function
  EndIf
  pc=new_pc
  fp=new_fp
  sp=0
  For i=0 To stack_sz-1
   s$=Input$(2,#1)
   push(Peek(Var s$,1)*256+Peek(Var s$,2))
  Next i
  Do
   s$=Input$(255,#1)
   For i=1 To Len(s$)
    wb(ad,Peek(Var s$,i))
    ad=ad+1
   Next i
  Loop Until Len(s$)=0
  If ad<>BASE_STATIC Then Error"Unrecoverable restore error!"
 Else
  cout("Saving '"+s$+"' ..."):endl()
  Open s2$(0)For Output As #1
  Print #1,"ZMIM save file"
  Print #1,"1"
  Print #1,Date$+" "+Time$
  Print #1,s$
  Print #1,Chr$(pc\65536);Chr$(pc\256);Chr$(pc Mod 256);
  Print #1,Chr$(fp\256);Chr$(fp Mod 256);
  Print #1,Chr$(sp\256);Chr$(sp Mod 256);
  Print #1,Chr$(BASE_STATIC\256);Chr$(BASE_STATIC Mod 256);
  For i=0 To sp-1
   Print #1,Chr$(st_peek(i)\256);Chr$(st_peek(i)Mod 256);
  Next i
  For i=0 To BASE_STATIC-1
   Print #1,Chr$(rb(i));
  Next i
 EndIf
 Close #1
 zsave=1
End Function

Function fi_choose$(d$,fspec$)
 Local col,f$,i,m,n,old_dir$,x
 old_dir$=Cwd$
 ChDir d$
 f$=Dir$(fspec$)
 Do While f$<>""
  n=n+1
  If Len(f$)>m Then m=Len(f$)
  f$=Dir$()
 Loop
 If n=0 Then cout("No files found"):endl():ChDir old_dir$:Exit Function
 Local all$(n)LENGTH m
 f$=Dir$(fspec$)
 For i=1 To n:all$(i)=f$:f$=Dir$():Next i
 ChDir old_dir$
 If n<6 Then
  For i=1 To n
   cout("  ["+Format$(i,"%2g")+"] "+all$(i)):endl()
  Next i
 Else
  col=0
  For i=1 To n
   x=1+(i\2)+col*(n\2)
   If x>n Then Exit For
   f$=rpad$(all$(x),m+2)
   cout("  ["+Format$(x,"%2g")+"] "+f$)
   If col=1 Then endl()
   col=(col+1)Mod 2
  Next i
  If col=1 Then endl()
 EndIf
 f$=cin$("File number? ")
 If Val(f$)<>0 Then fi_choose$=d$+"\"+all$(Val(f$))
End Function

Dim ss$(4)Length 20
INSTALL_DIR=0
SAVE_DIR=1
SCRIPT_DIR=2
STORY_DIR=3
STORY=4
DESCRIPTION$="Z-MIM: a Z-Machine Interpreter for the Maximite"
VERSION$="Release 3b1 for Colour Maximite 1, MMBasic 4.5C"
COPYRIGHT_$="Copyright (c) 2019-20 Thomas Hugo Williams"

Sub main_init()
 Local i,x
 endl()
 mem_init(ss$(STORY_DIR)+"\"+ss$(STORY)+".z3")
 di_init()
 endl()
 GLOBAL_VAR=rw(&h0C)
 x=rb(&h01)
 x=x Or &b00010000
 x=x And &b10011111
 wb(&h01,x)
 wb(&h20,C_HEIGHT)
 wb(&h21,C_WIDTH)
 pc=rw(&h06)
 For i=0 To 511:stack(i)=0:Next i
 sp=0
 fp=&hFFFF
End Sub

Sub main()
 Local i,old_dir$,old_pc,state,s$
 de_init()
 Mode 1
 Cls
 cout("        ______     __  __ _____ __  __ "):endl()
 cout("       |___  /    |  \/  |_   _|  \/  |"):endl()
 cout("          / /_____| \  / | | | | \  / |"):endl()
 cout("         / /______| |\/| | | | | |\/| |"):endl()
 cout("        / /__     | |  | |_| |_| |  | |"):endl()
 cout("       /_____|    |_|  |_|_____|_|  |_|"):endl()
 endl()
 cout(DESCRIPTION$):endl()
 endl()
 cout(COPYRIGHT_$):endl()
 cout(VERSION$):endl()
 endl()
 ss$(INSTALL_DIR)="\zmim"
 ss$(SAVE_DIR)=ss$(INSTALL_DIR)+"\saves"
 ss$(SCRIPT_DIR)=ss$(INSTALL_DIR)+"\scripts"
 ss$(STORY_DIR)=ss$(INSTALL_DIR)+"\stories"
 cout("Select a story file from '"+ss$(STORY_DIR)+"':"):endl()
 Do While s$=""
  s$=fi_choose$(ss$(STORY_DIR),"*.z3")
 Loop
 s$=Mid$(s$,Len(ss$(STORY_DIR))+2)
 ss$(STORY)=Left$(s$,Len(s$)-3)
 old_dir$=Cwd$
 ChDir(ss$(SAVE_DIR))
 s$=Dir$(ss$(STORY),File):If s$<>""Then Error"Unexpected file: "+s$
 s$=Dir$(ss$(STORY),Dir):If s$=""Then MkDir(ss$(STORY))
 ChDir(ss$(SCRIPT_DIR))
 s$=Dir$(ss$(STORY),File):If s$<>""Then Error"Unexpected file:"+s$
 s$=Dir$(ss$(STORY),Dir):If s$=""Then MkDir(ss$(STORY))
 ChDir(old_dir$)
 main_init()
 s$=ss$(STORY)+"-"+Date$+"-"+Time$+".scr"
 For i=1 To Len(s$)
  If Peek(Var s$,i)=Asc(":")Then Poke Var s$,i,Asc("-")
 Next i
 s$=ss$(SCRIPT_DIR)+"\"+ss$(STORY)+"\"+s$
 If LCase$(cin$("Write script to '"+s$+"' [y|N] "))="y"Then
  Open s$ For Output As #2
  script=S_WRITE
 EndIf
 For i=0 To 10:endl():Next i
 Timer=0
 Do While state<>E_QUIT
  old_pc=pc
  If state=E_OK Or state=E_REPEAT Then
   state=exec(ztrace)
  Else
   state=debug()
  EndIf
 Loop
 endl()
 cout("Num instructions processed = "+Str$(num_ops)):endl()
 cout("Instructions / second      = ")
 cout(Format$(1000*num_ops/Timer,"%.1f"))
 endl()
 cout("Num page faults            = "+Str$(pf)):endl()
 If script And S_WRITE Then Close #2
 If script And S_READ Then Close #3
End Sub

main()
End
