' ZMIM a Z-Machine Interpreter for the Colour Maximite
' Copyright (c) 2019 Thomas Hugo Williams

Function fmt_mnemonic$(m$)
  fmt_mnemonic$ = rpad$(m$, 13)
End Function

Function fmt_operand$(i)
  Local a$, x
  x = op_value(i)
  If op_type(i) <> OT_VARIABLE Then
    fmt_operand$ = "#" + lpad$(Hex$(x), 2, "0")
    Exit Function
  EndIf
  If x = 0 Then
    a$ = "(SP)+"
  ElseIf x < &h10 Then
    a$ = "L" + lpad$(Hex$(x - 1), 2, "0")
  Else
    a$ = "G" + lpad$(Hex$(x - &h10), 2, "0")
  EndIf
  If x > 0 Then a$ = a$ + " (=" + Hex$(get_var(x)) + ")"
  fmt_operand$ = a$
End Function

Function fmt_store$(st)
  Local a$
  If st = 0 Then
    a$ = "-(SP)"
  ElseIf st < &h10 Then
    a$ = "L" + lpad$(Hex$(st - 1), 2, "0")
  Else
    a$ = "G" + lpad$(Hex$(st - &h10), 2, "0")
  EndIf
  fmt_store$ = a$
End Function

Function fmt_branch$(br)
  Local new_pc
  If br And BIT_15 Then Print " [TRUE] "; Else Print " [FALSE] ";
  new_pc = br AND BTM_15_BITS
  If new_pc = pc - 2 Then
    Print "RFALSE"
  ElseIf new_pc = pc - 1 Then
    Print "RTRUE"
  Else
    Print Hex$(new_pc);
  EndIf
End Function

Function fmt_call_operands$
  Local a$, i
  a$ = Hex$(2 * op_value(0)) + " ("
  For i = 1 To op_num - 1
    If i > 1 Then a$ = a$ + ", "
    a$ = a$ + fmt_operand$(i)
  Next i
  a$ = a$ + ")"
  fmt_call_operands$ = a$
End Function

Function fmt_jump_operands$
  Local of
  If op_num > 1 Then Error "Too many operands."
  of = get_op(0)
  If of And BIT_15 Then of = of - 65536
  fmt_jump_operands$ = Hex$(pc + of - 2)
End Function

Function fmt_store_operands$
  Local a$, i
  If op_type(0) = OT_VARIABLE Then Error "Unexpected VARIABLE operand"
  a$ = a$ + fmt_store$(op_value(0))
  For i = 1 To op_num - 1
    a$ = a$ + ", " + fmt_operand$(i)
  Next i
  fmt_store_operands$ = a$
End Function

Function fmt_normal_operands$
  Local a$, i
  For i = 0 To op_num - 1
    If i > 0 Then a$ = a$ + ", "
    a$ = a$ + fmt_operand$(i)
  Next i
  fmt_normal_operands$ = a$
End Function

Sub dmp_op(m$, st, br)
  Print fmt_mnemonic$(m$);
  If m$ = "CALL" Then
    Print fmt_call_operands$();
  ElseIf m$ = "JUMP" Then
    Print fmt_jump_operands$();
  ElseIf m$ = "STORE" Or m$= "DEC_CHK" Or m$ = "INC_CHK" Then
    Print fmt_store_operands$();
  Else
    Print fmt_normal_operands$();
  EndIf
  If st > -1 Then Print " -> "; fmt_store$(st);
  If br > 0 Then Print fmt_branch$(br);
  Print
End Sub
